@符号
java 注解（Annotation）标识。
注解，定义在java.lang包中。
@Override  表示当前方法是覆盖父类的方法。
@Deprecated  表示当前元素是不赞成使用的。
@SuppressWarnings 表示关闭一些不当的编译器警告信息。

最大值、最小值
public class TestJAVA4_4
{
    public static void main(String[] args)  {
    	
    	int a1 =  java.lang.Integer.MIN_VALUE;
    	int a2 = java.lang.Integer.MAX_VALUE;
    	System.out.println(a1);
    	System.out.println(a2);
    	
    	float b1 = java.lang.Float.MIN_VALUE;
    	float b2 = java.lang.Float.MAX_VALUE;
    	System.out.println(b1);
    	System.out.println(b2);
 
    	double c1 = java.lang.Double.MIN_VALUE;
    	double c2 = java.lang.Double.MAX_VALUE;
    	System.out.println(c1);
    	System.out.println(c2);
    	
    	short d1 = Short.MAX_VALUE;
    	short d2 = Short.MIN_VALUE;
    	System.out.println(d1);
    	System.out.println(d2);
 
    	byte e1 = Byte.MAX_VALUE;
    	byte e2 = Byte.MIN_VALUE;
    	System.out.println(e1);
    	System.out.println(e2); 
    }    
}

-2147483648
2147483647
1.4E-45
3.4028235E38
4.9E-324
1.7976931348623157E308
32767
-32768
127
-128

多态
多态是面向对象程序设计的又一个重要特征。多态是允许程序中出现重名现象。
Java 语言中含有方法重载与成员覆盖两种形式的多态。
方法重载：在一个类中，允许多个方法使用同一个名字，但方法的参数不同，完成的功能也不同。
成员覆盖：子类与父类允许具有相同的变量名称，但数据类型不同，允许具有相同的方法名称，但完成的功能不同。
多态的特性使程序的抽象程度和简捷程度更高，有助于程序设计人员对程序的分组协同开发。

匿名对象
“匿名对象”，顾名思义，就是没有明确的声明的对象。可以简单的理解为只使用一次的对象，即没有任何一个具体的对象名称引用它。
System.out.println(new classA.d);


this()
调用类中无参构造方法

static
静态变量
静态函数

静态代码块
public class TestJAVA4_4
{
	static {System.out.println("static block TestJAVA4_4");}
    public static void main(String[] args)  {	
    	classA ca = new classA();
    	classA cb = new classA();
    	ca.fun1();
    	cb.fun1();
    } 
}

class classA
{
  public void fun1()
  {
	  System.out.println("classA");
  }
  
  static {System.out.println("static block classA");}

}
执行结果：
static block TestJAVA4_4
static block classA
classA
classA

javadoc 的输出
示例 《java 基础教程》p201 
javadoc -d PersonJavaDoc -version -author PersonJavaDoc.java
 -d：表示生成目录，目录名称为 PersonJavaDoc
 -version：表示要求 javadoc 程序在说明文件中加入版本信息。
 -author：表示要求 javadoc 程序在说明文件中加入作者信息。
 
 继承
 访问修饰符共四种：public，default（就是不写），protected，private。
 不写，也就是default，也称package，是指同一个包内可以访问到这个类～其他三种倒和C++都一样。
 default只能被包中的类访问。
而protected则可以被不同包中的子类访问，这样来说，protected的可见范围还大一些。

在 java 中只允许单继承，而不允许多重继承，也就是说一个子类只能有一个父类，但是 java 中却允许多层继承

示例

/* TestJAVA4_4.java */
package test;
 
public class TestJAVA4_4 extends classA
{
    public static void main(String[] args)  {
    
    	classA A1 = new classA();
    	System.out.println(A1.a1);
 
    	classA A2 = new classB();
    	System.out.println(A2.a1);
    	// not correct
    	//System.out.println(A2.a3);
    	
    	// not correct
    	// classB B1 = new classA(); 
    	// System.out.println(B1.a1);
    	
    	classB B1 = new classB();
    	System.out.println(B1.a1);
    }
}

class classA
{
  int a1 =2;
  int a2 = 3;

}

class classB extends classA
{
  int a1 =12;
  int a2 = 13;
  int a3 = 13;

}

super
调用父类的构造方法，方法，变量
用 super 调用父类中的构造方法，只能放在程序的第一行。
super 关键字不仅可以调用父类中的构造方法，也可以调用父类中的属性或方法，

package test;
 
public class TestJAVA4_4
{
    public static void main(String[] args)  {
    
    	classA A1 = new classA(1,2);
    	System.out.println(A1.a1);
 
    	classA A2 = new classB(11,12,13);
    	System.out.println(A2.a1);
    	
    	classB B1 = new classB(11,12,13);
    	System.out.println(B1.a1);
    }
    
    
}

class classA
{
  int a1 =2;
  int a2 = 3;
  
  public classA(int a1, int a2)
  {
	  this.a1 = a1;
	  this.a2 = a2;
  }
  
  public void print()
  {
	  System.out.println(a1 + " " +  a2);
  }
}

class classB extends classA
{
  public classB(int a1, int a2, int a3)
  {
	  super(20,30);
	  super.print();
  }
 
  int a1 =super.a1;
  int a2 = 113;
  int a3 = 113;

}

执行结果
20 30
20
20 30
112

限制子类访问父类定义的方法，变量
加private, 需要认识：
只要父类中的属性被“private”声明的话，那么子类就再也无法访问到它了。实际上并不是这样的，在父类中加入了 private 关键字修饰，其目的只是相当于
对子类隐藏了此属性，子类无法去显式的调用这些属性，但是却可以隐式地去调用（简单说就是间接访问）。
总之，就是加了private 不能直接访问。

复写
就是c++中的覆盖， 子类对于父类来说嘚。

重载
就是方法名称相同，但是参数类型或者参数个数不同， 同对一个类中使用来说的。

抽象类








 
 


